<?php

/**
 * @file
 * Functions to support theming in the standard theme.
 */

 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\SafeMarkup;
 use Drupal\Core\Render\Element;
 use Drupal\Core\Url;
 use Drupal\file\Entity\File;
 use Drupal\Core\Template\Attribute;

/**
 * Implements hook_preprocess_HOOK for html().
 */
function beaker_preprocess_html(&$variables) {
  // Add classes to body
  $variables['attributes']['class'][] = empty($variables['logged_in']) ? '' : 'user-logged-in';
  $variables['attributes']['class'][] = empty($variables['root_path']) ? 'path-frontpage' : '';
  $variables['attributes']['class'][] = empty($variables['node_type']) ? '' : 'node--type-' . \Drupal\Component\Utility\Html::getClass($variables['node_type']);

  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node) {
    $variables['attributes']['class'][] = 'node--id-' . $node->nid->value;
  }
  $request = \Drupal::request();
  if ($request->attributes->get('exception')) {
    $variables['attributes']['class'][] = 'page--error--'. $request->attributes->get('exception')->getStatusCode();
  }

  // setup the page title
  if (empty($variables['head_title']['title']) && $request) {
    if ($route = $request->attributes->get(\Symfony\Cmf\Component\Routing\RouteObjectInterface::ROUTE_OBJECT)) {
      $variables['head_title']['title'] = \Drupal::service('title_resolver')->getTitle($request, $route);
    }
  }
}

/**
 * Implements hook_form_alter() for contact forms.
 */
function beaker_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // For the contact message forms, where we do not display the labels, we will
  // just use them as placeholders for text elements.
  if(substr($form_id, 0, 15) === 'contact_message') {
    beaker_attach_placeholders_from_title($form);
  }
}

/**
 * Searches through a set of nested form elements and uses the title of the
 * elements as value for the placeholder attribute.
 *
 * @param array $elements
 *  An array of form elements.
 */
function beaker_attach_placeholders_from_title(&$elements) {
  if (!is_array($elements)) {
    return ;
  }
  // The placeholder makes sense only for text elements, but it should not hurt
  // if we attach it to all of them. In that case, it will just not be used.
  if (!empty($elements['#type']) && !empty($elements['#title'])) {
    $elements['#placeholder'] = $elements['#title'];
  }
  // Recursively search through all the children of the elements.
  foreach (Element::children($elements) as $key) {
    beaker_attach_placeholders_from_title($elements[$key]);
  }
}
